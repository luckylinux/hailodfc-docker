FROM python:3.10-alpine

ARG TARGETPLATFORM
#ARG BUILDPLATFORM

# App Path
ARG APP_PATH="/opt/app"

# Virtual Environment Path
ARG VENV_PATH="/opt/venv"

# Host Mount Path
ARG HOST_MOUNT_PATH="/opt/src"

# Hailo DFC Version
ARG HAILO_DFC_VERSION="3.29.0"

# Hailo DFC Whell
ARG HAILO_DFC_WHEEL="hailo_dataflow_compiler-${HAILO_DFC_VERSION}-py3-none-linux_x86_64.whl"

# Create Directory for App and Venv
RUN mkdir -p "/opt"
RUN mkdir -p "${APP_PATH}"
RUN mkdir -p "${VENV_PATH}"

# Change Directory
WORKDIR "${APP_PATH}"

# Copy Sources
COPY app/ "${APP_PATH}"

# Update Sources
# Install other Dependencies / recommended Packages
# Shadow is needed in order to use "chsh"
RUN --mount=type=cache,mode=0777,target=/var/cache/apk,sharing=locked \
    --mount=type=cache,mode=0777,target=/var/lib/apk,sharing=locked \ 
    apk update && \ 
    apk add ca-certificates bash curl wget shadow shadow-subids shadow-login coreutils && \
    apk add python3 py3-pip python3-dev graphviz graphviz-dev python3-tkinter && \
    echo "Finished installing base Packages"

# Change Shell
RUN chsh -s /bin/bash root
RUN export SHELL="/bin/bash"
RUN ln -sf /bin/bash /bin/sh

# set ENV to execute startup scripts
ENV ENV /etc/profile

# Set PATH Variable
ENV PATH="${APP_PATH}:$PATH"

# Create folder for Caching Packages
RUN mkdir -p /var/lib/installer

# Change Directory and Copy requirements.txt
# WORKDIR "/opt"
COPY requirements.txt "/opt/requirements.txt"

# Create venv
RUN python3 -m venv "${VENV_PATH}"

# Set PATH Variable to include venv
ENV PATH="${VENV_PATH}/bin:$PATH"

# Activate venv
RUN source "${VENV_PATH}/bin/activate"

# Upgrade pip
RUN python -m pip install --upgrade pip

# Print Python Version
RUN python --version

# Copy Files into the Container
#COPY files/ "/tmp"

# Change Working Directory
WORKDIR /tmp

# Install onnxruntime using Soure Dist
#RUN wget https://github.com/microsoft/onnxruntime/archive/refs/tags/v1.12.0.tar.gz -O onnxruntime-v1.12.0.tar.gz && \
#    tar xvf onnxruntime-v1.12.0.tar.gz && cd onnxruntime-1.12.0 && python -m build . --wheel && ls -l && pip install *.whl
RUN --mount=type=bind,target=${HOST_MOUNT_PATH} \
    ls -l && \
    mkdir -p ./onnxruntime-1.12.0 && \
    tar xvf ${HOST_MOUNT_PATH}/files/onnxruntime-1.12.0.tar.gz -C ./ && \
    ls -l && \
    cd onnxruntime-1.12.0 && \
    ln -s requirements-dev.txt requirements.txt && \
    mkdir -p onnxruntime/backend && \
    mkdir -p onnxruntime/capi && \
    mkdir -p onnxruntime/capi/training && \
    mkdir -p onnxruntime/datasets && \
    mkdir -p onnxruntime/tools && \
    mkdir -p onnxruntime/tools/mobile_helpers && \
    mkdir -p onnxruntime/tools/ort_format_model && \
    ./build.sh && \
    ls -l && \
    pip install *.whl

    #pip wheel -r requirements-dev.txt . && \

# Install required Packages
RUN --mount=type=cache,mode=0777,target=/var/lib/pip,sharing=locked \
    pip install --cache-dir /var/lib/pip --no-binary=onnxruntime -r "/opt/requirements.txt"

# Install Hailo DFC
RUN --mount=type=bind,target=${HOST_MOUNT_PATH} --mount=type=cache,mode=0777,target=/var/lib/pip,sharing=locked \
    pip install --cache-dir /var/lib/pip --no-binary=onnxruntime ${HOST_MOUNT_PATH}/files/${HAILO_DFC_WHEEL}

# Copy and Execute Entrypoint Script
COPY docker-entrypoint.sh /opt/
RUN chmod +x /opt/docker-entrypoint.sh
ENTRYPOINT ["/opt/docker-entrypoint.sh"]
